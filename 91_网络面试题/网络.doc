第一部分：协议层次以及它们的服务类型
1.OSI 七层模型
应用层  作用是通过应用程序间的交互来完成特定的网络应用
表示层  作用是使通信的应用程序能够解释交换数据的含义
会话层  作用是负责建立、管理和终止表示层实体之间的通信会话
传输层  传输层的主要任务是为两台主机进程之间的通信提供服务
网络层  主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送
数据链路层  数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧
物理层  作用是实现计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异

2.TCP/IP 参考模型
应用层  将OSI参考模型中的会话层、表示层和应用层的功能合并到一个应用层实现
传输层  该层对应于 OSI 参考模型的传输层，为上层实体提供源端到对端主机的通信功能
网际互联层  网际互联层对应 OSI 参考模型的网络层，主要负责相同或不同网络中计算机之间的通信
网络访问层  网络接入层的功能对应于 OSI 参考模型中的物理层和数据链路层，它负责监视数据在主机和网络之间的交换

3.TCP/IP 五层参考模型
应用层
传输层
网络层
数据链路层
物理层

4.OSI 模型和 TCP/IP 模型异同比较
相同点：都是采用了层次结构，都能够提供面向连接和无连接两种通信服务机制
不同点：OSI是七层模型，TCP/IP是四层
OSI是先有模型，后有协议规范，TCP/IP是先有协议集然后建立模型
TCP/IP 一开始就提出面向连接和无连接服务
OSI 一开始只强调面向连接服务，直到很晚才开始制定无连接的服务标准。
OSI将网络划分七层，实现比较困难，TCP/IP分层简单，容易实现

5.OSI 和 TCP/IP 协议之间的对应关系
应用层（Application）
HTTP, TFTP, FTP, NFS, WAIS, SMTP, Telnet, DNS, SNMP
表示层（Presentation）
TIFF, GIF, JPEG, PICT
会话层（Session）
RPC, SQL, NFS, NetBIOS, names, AppleTalk
传输层（Transport）
TCP, UDP
网络层（Network）
IP, ICMP, ARP, RARP, RIP, IPX
数据链路层（Data Link）
FDDI, Frame Relay, HDLC, SLIP, PPP
物理层（Physical）
EIA/TIA-232, EIA/TIA-499, V.35, 802.3
tcp/ip将应用层表示层会话层合并为应用层
将数据链路层和物理层合并为数据链路层

6.为什么 TCP/IP 去除了表示层和会话层
因为会话层、表示层、应用层都是在应用程序内部实现的，最终产出的是一个应用数据包
所以TCP/IP协议便将表示层和会话层与应用层整合在一起，让整个过程更为清晰明了

7.数据如何在各层之间传输【数据的封装过程】
在发送主机端，一个应用层报文被传送到运输层，在最简单的情况下，
运输层收取到报文，并附上允许接收端运输层向上向适当的应用程序交付
报文的信息以及差错检测位信息。能让接收端能够判断报文中的比特是否被改变，
应用层报文和运输层首部信息一道构成了运输层报文段。
运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报。
该数据报接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧，
在物理层数据帧被封装成比特流，之后通过传输介质传送到对端。


第二部分：应用层
1.HTTP 头部包含哪些信息
HTTP头部本质上是一个传递额外重要信息的键值对。
主要分为：通用头部，请求头部，响应头部和实体头部。
通用头部
Cache- Control   用来指定当前的请求/回复中是否使用缓存机制
Connection      客户端（浏览器）想要优先使用的连接类型
Date            报文创建时间
Trailer         会实现说明在报文主体后记录哪些首部字段，该首部字段可以使用在HTTP/1.1版本分块传输编码
Transfer-Encoding  用来改变报文格式
Upgrade      要求服务器升级到一个高版本协议
Via         告诉服务器，这个请求是由哪些代理发出的
Warning    一个一般性的警告，表示在实体内容中可能存在错误

2.Keep-Alive 和非 Keep-Alive 区别，对服务器性能有影响吗
keep-Alive 是长连接  浏览器发起HTTP请求后不会马上断开连接，
当长时间的保持 TCP 连接时容易导致系统资源被无效占用
可以设置keep-alive timeout参数，当TCP连接在传送完最后一个HTTP响应，该连接会保持
keepalive_timeout 秒，之后就开始关闭这个链接。
非keep-Alive是短连接 浏览器每次发起HTTP请求都要与服务器创建一个新的TCP连接，
服务器完成请求处理后立即断开TCP连接，创建和关闭连接的过程需要消耗资源和时间

3.HTTP 长连接短连接使用场景是什么
长连接多用于操作频繁，点对点的通讯，而且客户端连接数目较少的情况
短连接用户数目较多的Web网站的HTTP服务一般用短连接

4.怎么知道 HTTP 的报文长度
当响应消息中存在 Content-Length 字段时，我们可以直接根据这个值来判断数据是否接收完成
如果服务器预先不知道请求内容的大小，就需要使用 Transfer-Encoding: chunked 
的方式来代替Content-Length。当数据分解成一系列数据块发送时，服务器就可以发送数据而不需要
预先知道发送内容的总大小，每一个分块包含十六进制的长度值和数据，最后一个分块长度值为0，表示实体结束

5.HTTP 方法了解哪些
HTTP/1.0 定义了三种请求方法：GET POST HEAD 方法
HTTP/1.1 增加了六种请求方法：OPTIONS PUT PATCH DELETE TRACE  CONNECT 方法

6.GET 和 POST 的区别
get提交的的数据会放在URL后面,请求参数会被完整的保留在浏览器记录中，参数直接暴露不能传输重要数据
post参数放在请求主体中，参数不会被保留，相比get方法，post方法更安全
get只支持URL编码，post支持多种编码
get只支持ASCII字符格式的参数，而post方法没有限制
get提交的数据大小有限制，post方法提交的数据没限制.
get方式需要使用Request.QueryString来取得变量的值
post方式通过Request.Form来获取。

7.GET 的长度限制是多少
HTTP中的GET方法是通过URL传递数据的，而URL本身并没有对数据的长度进行限制，真正限制
GET长度的是浏览器
由于POST方法请求参数在请求主体中，理论上讲，post方法是没有大小限制的，
而真正起限制作用的是服务器处理程序的处理能力。

8.HTTP 与 HTTPs 的工作方式【建立连接的过程】
HTTP（Hyper Text Transfer Protocol: 超文本传输协议）是一种简单的请求-响应协议
HTTP使用的是TCP作为运输层协议，其默认工作在TCP协议80端口，连接建立浏览器和服务器
进程就可以通过套接字接口访问TCP，其通信内容以明文的方式发送，不通过任何方式的数据加密
HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer）是以安全为目标的HTTP协议
默认连接服务器443端口，在HTTP的基础上通过传输加密和身份认证的方式保证了传输过程的安全性
客服端发起连接请求，连接443端口，发送自身所支持的加密算法，
服务端把自己的信息以数字证书的形式返回给客户端（证书内容有密钥公钥，网站地址，证书颁发机构，失效日期等）。
证书中有一个公钥来加密信息，私钥由服务器持有。
客户端收到服务器的响应后会先验证证书的合法性（证书中包含的地址与正在访问的地址是否一致，证书是否过期）。
如果验证通过，或用户接受了不受信任的证书，浏览器就会生成一个随机的对称密钥（session key）并用公钥加密，
让服务端用私钥解密，解密后就用这个对称密钥进行传输了，并且能够说明服务端确实是私钥的持有者。

9.HTTPS 和 HTTP 的区别
HTTP 协议以明文方式发送内容，数据都是未加密的，安全性较差
HTTPS 数据传输过程是加密的，安全性较好
HTTP 页面响应比HTTPS快，因为HTTP使用3次握手建立连接，
而HTTPS除了TCP的3次握手，还需要经历一个SSL协商过程。
HTTP是80端口，HTTPS是443端口。

10.HTTPS 的加密方式
HTTPS 采用对称加密和非对称加密相结合的方式，首先使用 SSL/TLS 协议进行加密传输
通过非对称加密，客户端和服务端协商好之后进行通信传输的对称密钥，后续的所有信息
都通过该对称秘钥进行加密解密，完成整个HTTPS的流程。

11.客户端为什么信任第三方证书
假设中间人篡改了证书原文，由于他没有 CA 机构的私钥，所以无法得到此时加密后的签名，
因此无法篡改签名。客户端浏览器收到该证书后会发现原文和签名解密后的值不一致，则说明
证书被中间人篡改，证书不可信，从而终止向服务器传输信息。

12.HTTP 是不保存状态的协议,如何保存用户状态
在客户端第一次向服务器发送HTTP请求后，服务器会创建一个Session对象并将客户端的
身份信息以键值对的形式存储下来，然后分配一个会话标识（SessionId）给客户端，
这个会话标识一般保存在客户端Cookie中，之后每次该浏览器发送HTTP请求都会带上
Cookie中的SessionId到服务器，服务器根据会话标识就可以将之前的状态信息与会话
联系起来，从而实现会话保持。

当服务器发送响应消息时，在 HTTP 响应头中设置 Set-Cookie 字段，用来存储客户端的状态信息。
客户端解析出 HTTP 响应头中的字段信息，并根据其生命周期创建不同的 Cookie，这样一来每次浏
览器发送 HTTP 请求的时候都会带上 Cookie 字段，从而实现状态保持。基于 Cookie 的会话保持与基于
Session 实现的会话保持最主要的区别是前者完全将会话状态信息存储在浏览器 Cookie 中。


13.状态码
1XX	指示信息–表示请求正在处理
2XX	成功–表示请求已被成功处理完毕
3XX	重定向–要完成的请求需要进行附加操作
4XX	客户端错误–请求有语法错误或者请求无法实现，服务器无法处理请求
5XX	服务器端错误–服务器处理请求出现错误


14.HTTP/1.1 和 HTTP/1.0 的区别
1.0默认短连接，1.1默认长连接
HTTP/1.1 在 1.0 的基础上新增了24个错误状态响应码

15.HTTP/1.X 和 HTTP/2.0 的区别
HTTP/1.X使用文本（字符串）传送， HTTP/2.0 采用二进制传送
HTTP/2.0 支持多路复用
HTTP/2.0 头部压缩。HTTP/2.0通过gzip和compress压缩头部然后再发送，
HTTP/2.0 支持服务器推送


17.DNS 的作用和原理
DNS（Domain Name System）是域名系统的英文缩写，将域名和IP地址相互映射
的一个分布式数据库，能够使人更方便地访问互联网。
假设主机A（IP地址为abc.xyz.edu）想知道主机B的IP地址（def.mn.edu）
主机A首先向它的本地DNS服务器发送一个DNS查询报文，该查询报文含有被转换的主机名def.mn.edu
本地DNS服务器将该报文转发到根DNS服务器，根DNS服务器注意到查询的IP地址前缀为edu后向
本地DNS服务器返回负责edu的顶级域名服务器的IP地址列表
本地DNS服务器则再次向这些顶级域名服务器发送查询报文。该顶级域名服务器注意到mn.edu的前缀，
并用权威域名服务器的IP地址进行响应
本地DNS服务器直接向该服务器发送查询报文从而获得主机B的IP地址。

18.DNS 为什么用 UDP
当进行区域传送（主域名服务器向辅助域名服务器传送变化的那部分数据）时会使用 TCP，因为数据同
步传送的数据量比一个请求和应答的数据量要多，而 TCP 允许的报文长度更长，因此为了保证数据的正确性，
会使用基于可靠连接的 TCP。
当客户端向DNS服务器查询域名( 域名解析)的时候，一般返回的内容不会超过UDP报文的最大长度，即512字节。
用UDP传输时，不需要经过TCP三次握手的过程，从而大大提高了响应速度，但这要求域名解析器和域名服务器
都必须自己处理超时和重传从而保证可靠性。

19.怎么实现 DNS 劫持
DNS 劫持即域名劫持，是通过将原域名对应的 IP 地址进行替换从而使得用户访问到错误的网站或者使得用户无法正常访问网站的一种攻击方式

20.socket() 套接字有哪些
流套接字（SOCK_STREAM）：流套接字基于 TCP 传输协议
数据报套接字（SOCK_DGRAM）：和流套接字不同，数据报套接字基于 UDP 传输协议
原始套接字（SOCK_RAW）当需要传送非传输层数据包（例如 Ping 命令时用的 ICMP 协议数据包）或者遇到操作系统无法处理的数据包时，此时就需要建立原始套接字来发送。

21.URI（统一资源标识符）和 URL（统一资源定位符）之间的区别
URL是URI的一个子集，两者都定义了资源是什么，而URL还定义了如何能访问到该资源
只要能唯一标识资源的就是URI，在URI的基础上给出其资源的访问方式的就是URL

22.为什么 fidder，charles 能抓到你的包【抓取数据包的过程】
我们需要抓取客户端的数据包，需要监控客户端与服务器交互之间的网络节点，
监控其中任意一个网络节点（网卡），获取所有经过网卡中的数据，
对这些数据按照网络协议进行解析，这就是抓包的基本原理

23.如果你访问一个网站很慢，怎么排查和解决
首先最直接的方法是查看本地网络是否正常
当网速测试正常时，我们对网站服务器速度进行排查，通过 ping 命令查看链接到服务器的时间和丢包等情况
如果网页打开的速度时快时慢，甚至有时候打不开，有可能是空间不稳定的原因
从网站本身找原因。网站的问题主要包括网站程序设计、网页设计结构和网页内容三个部分。

24.其他协议
FTP（File Transfer Protocol，文件传输协议）是用于在网络上进行文件传输的一套标准协议
TFTP（Trivial File Transfer Protocol，简单文件传输协议）一个小且易实现的文件传输协议
SMTP（Simple Main Transfer Protocol，简单邮件传输协议）是在 Internet 传输 Email 的标准，是一个相对简单的基于文本的协议
DHCP ( Dynamic Host Configuration Protocol，动态主机设置协议 ) 是一个局域网的网络协议
SNMP（Simple Network Management Protocol，简单网络管理协议）能够支持网络管理系统，用以监测连接到网络上的设备是否有任何引起管理上关注的情况。

25.网页解析全过程【用户输入网址到显示对应页面的全过程】
1.DNS解析：当输入一个网址并按下回车键的时候，浏览器获得一个域名，而在实际通信过程中，我们需要的是一个IP地址，因此我们需要先把域名转换成相应IP地址
2.TCP 连接：浏览器通过DNS获取到Web服务器真正的IP地址后，便向Web服务器发起TCP连接请求，通过TCP三次握手建立好连接后，浏览器便可以将 HTTP 请求数据发送给服务器了
3.发送HTTP请求：浏览器向Web服务器发起一个HTTP请求，在这一过程中，会涉及到负载均衡等操作。
4.处理请求并返回：服务器获取到客户端的 HTTP 请求后，会根据 HTTP 请求中的内容来决定如何获取相应的文件，并将文件发送给浏览器。
5.浏览器渲染：浏览器根据响应开始显示页面，首先解析 HTML 文件构建 DOM 树，然后解析 CSS
6.文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。
7.断开连接：客户端和服务器通过四次挥手终止 TCP 连接

第三部分 传输层
3.1三次握手和四次挥手机制
3.2如果三次握手的时候每次握手信息对方没有收到会怎么样
3.3为什么要进行三次握手？两次握手可以吗？
3.4第 2 次握手传回了 ACK，为什么还要传回 SYN
3.5为什么要四次挥手？
3.6CLOSE-WAIT 和 TIME-WAIT 的状态和意义
3.7TIME_WAIT 状态会导致什么问题，怎么解决
3.8TIME-WAIT 为什么是 2MSL
3.9有很多 TIME-WAIT 状态如何解决
3.10有很多 CLOSE-WAIT 怎么解决
3.11TCP 和 UDP 的区别
3.12TCP 协议中的定时器
3.13TCP 是如何保证可靠性的
3.14UDP 为什么是不可靠的？bind 和 connect 对于 UDP 的作用是什么
3.15TCP 超时重传的原理
3.16TCP 的停止等待协议是什么
3.17TCP 最大连接数限制
3.18TCP 流量控制与拥塞控制
3.19如果接收方滑动窗口满了，发送方会怎么做
3.20TCP 拥塞控制采用的四种算法
3.21TCP 粘包问题
3.22TCP 报文包含哪些信息
3.23SYN FLOOD 是什么
3.24为什么服务端易受到 SYN 攻击
3.25高并发服务器客户端主动关闭连接和服务端主动关闭连接的区别第四部分、网络层
4.1IP 协议的定义和作用
4.2域名和 IP 的关系，一个 IP 可以对应多个域名吗
4.3IPV4 地址不够如何解决
4.4路由器的分组转发流程
4.5路由器和交换机的区别
4.6ICMP 协议概念/作用
4.7ICMP 的应用
4.8两台电脑连起来后 ping 不通，你觉得可能存在哪些问题？
4.9ARP 地址解析协议的原理和地址解析过程
4.10网络地址转换 NAT
4.11TTL 是什么？有什么作用
4.12运输层协议和网络层协议的区别第五部分：数据链路层
5.1MAC 地址和 IP 地址分别有什么作用
5.2为什么有了 MAC 地址还需要 IP 地址
5.3为什么有了 IP 地址还需要 MAC 地址
5.4私网地址和公网地址之间进行转换：同一个局域网内的两个私网地址，经过转换之后外面看到的一样吗
5.5以太网中的 CSMA/CD 协议
5.6数据链路层上的三个基本问题
5.7PPP 协议
5.8为什么 PPP 协议不使用序号和确认机制第六部分：物理层
6.1物理层主要做什么事情
6.2主机之间的通信方式
6.3通道复用技术
6.3 几种常用的宽带接入技术第七部分：计算机网络中的安全
7.1安全攻击有哪些
7.2ARP 攻击
7.3对称加密和非对称的区别，非对称加密有哪些
7.4AES 的过程
7.4RSA 和 AES 算法有什么区别
7.5DDoS 有哪些，如何防范